import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
from matplotlib.animation import FuncAnimation

# Données fournies
data = np.array([
    [80, 82, 83, 79, 68, 0],
    [75, 81, 83, 78, 67, 0.5],
    [74, 81, 83, 78, 66, 1],
    [73, 80, 83, 78, 65, 1.5],
    [73, 78, 81, 77, 65, 2],
    [73, 78, 80, 77, 64, 2.5],
    [72, 78, 80, 77, 64, 3],
    [72, 77, 80, 77, 63, 3.5],
    [72, 79, 80, 76, 61, 4],
    [72, 78, 79, 76, 60, 4.5],
    [72, 77, 79, 76, 59, 5]
])

# Séparer les données
sondes_data = data[:, :5]
temps_data = data[:, 5]

# Positions des sondes dans le séchoir
sonde_positions = np.array([
    [0, 0, 0],
    [1.5, 1.5, 1.5],
    [3, 3, 3],
    [3, 3, 0],
    [0, 0, 3]
])

# Paramètres du séchoir
séchoir_dimensions = [3, 3, 3]

# Discrétisation de l'espace
x_vals = np.linspace(0, séchoir_dimensions[0], 100)
y_vals = np.linspace(0, séchoir_dimensions[1], 100)
z_vals = np.linspace(0, séchoir_dimensions[2], 100)

# Créer une grille pour l'espace tridimensionnel et le temps
X, Y, Z = np.meshgrid(x_vals, y_vals, z_vals)

# Créer une figure 3D
fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')

# Initialiser une heatmap vide
heatmap = ax.scatter(X.flatten(), Y.flatten(), Z.flatten(), c=np.zeros_like(X.flatten()), cmap='viridis', marker='o', s=10)

# Ajouter des étiquettes
ax.set_xlabel('Sonde X')
ax.set_ylabel('Sonde Y')
ax.set_zlabel('Sonde Z')
ax.set_title('Champ de température dans le séchoir avec contribution du temps')

# Fonction pour mettre à jour l'animation
def update(frame):
    ax.cla()  # Effacer l'axe à chaque mise à jour

    # Contribution spatiale avec une fonction gaussienne pour chaque sonde
    for i in range(sondes_data.shape[1]):
        spatial_contrib = np.exp(-((X - sonde_positions[i, 0])**2 + (Y - sonde_positions[i, 1])**2 + (Z - sonde_positions[i, 2])**2) / (2 * 1.0**2))

        # Combinaison de la contribution spatiale et temporelle
        T_interp_temps = sondes_data[frame, i] * spatial_contrib
        heatmap = ax.scatter(X.flatten(), Y.flatten(), Z.flatten(), c=T_interp_temps.flatten(), cmap='viridis', marker='o', s=10)

    # Ajouter des étiquettes
    ax.set_xlabel('X')
    ax.set_ylabel('Y')
    ax.set_zlabel('Z')
    ax.set_title(f'Champ de température dans le séchoir à t = {temps_data[frame]} heures')

# Calculer l'intervalle entre les frames en millisecondes pour correspondre à 5 secondes pour 30 minutes
interval_ms = 5 * 1000 / len(temps_data)

# Créer l'animation avec l'intervalle spécifié
animation = FuncAnimation(fig, update, frames=len(temps_data), blit=False, interval=interval_ms)

# Afficher l'animation
plt.show()

